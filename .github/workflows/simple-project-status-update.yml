name: Simple Project Status Update

on:
  pull_request:
    types: [opened, edited]

permissions:
  contents: read
  issues: read
  pull-requests: read
  repository-projects: write

jobs:
  update-status:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Extract PR info and linked issues
        id: extract
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          OWNER="${{ github.repository_owner }}"
          REPO="$(basename "${{ github.repository }}")"

          echo "Fetching linked issues from PR #$PR_NUMBER"
          gh_response=$(gh api graphql -f query='
            query($owner: String!, $repo: String!, $number: Int!) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $number) {
                  closingIssuesReferences(first: 10) {
                    nodes {
                      id
                      number
                      title
                    }
                  }
                }
              }
            }' -F owner="$OWNER" -F repo="$REPO" -F number="$PR_NUMBER")

          issue_ids=$(echo "$gh_response" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes[].id')

          echo "issue_ids<<EOF" >> $GITHUB_OUTPUT
          echo "$issue_ids" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update issue project items to In Review
        run: |
          STATUS_FIELD_ID="PVTSSF_lAHOAy7H8s4BAW1MzgzL3RU"
          IN_REVIEW_OPTION_ID="40277743"

          for ISSUE_ID in ${{ steps.extract.outputs.issue_ids }}
          do
            echo "Fetching project item ID for issue: $ISSUE_ID"

            item_response=$(gh api graphql -F id="$ISSUE_ID" -f query='
              query($id: ID!) {
                node(id: $id) {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        ... on ProjectV2Item {
                          id
                        }
                      }
                    }
                  }
                }
              }')

            ITEM_ID=$(echo "$item_response" | jq -r '.data.node.projectItems.nodes[0].id')

            if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" == "null" ]; then
              echo "No project item found for issue: $ISSUE_ID"
              continue
            fi

            echo "Updating project item $ITEM_ID to 'In Review'"

            gh api graphql -f query='
              mutation($itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectV2ItemId: $itemId,
                    fieldId: $fieldId,
                    value: {
                      singleSelectOptionId: $optionId
                    }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }' -F itemId="$ITEM_ID" -F fieldId="$STATUS_FIELD_ID" -F optionId="$IN_REVIEW_OPTION_ID"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

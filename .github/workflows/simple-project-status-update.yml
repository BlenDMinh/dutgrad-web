name: Simple Project Status Update

on:
  pull_request:
    types: [opened, edited]

permissions:
  contents: read
  issues: read
  pull-requests: read
  repository-projects: write

jobs:
  update-status:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Extract PR info and linked issues
        id: extract
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          OWNER="${{ github.repository_owner }}"
          REPO="$(basename "${{ github.repository }}")"

          echo "Fetching linked issues from PR #$PR_NUMBER"
          gh_response=$(gh api graphql -f query='
            query($owner: String!, $repo: String!, $number: Int!) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $number) {
                  closingIssuesReferences(first: 10) {
                    nodes {
                      id
                      number
                      title
                    }
                  }
                }
              }
            }' -F owner="$OWNER" -F repo="$REPO" -F number="$PR_NUMBER")

          issue_ids=$(echo "$gh_response" | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes[].id')

          echo "issue_ids<<EOF" >> $GITHUB_OUTPUT
          echo "$issue_ids" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}  # Use PAT if org-owned project

      - name: Update project item status to "In Review"
        run: |
          for ISSUE_ID in ${{ steps.extract.outputs.issue_ids }}
          do
            echo "Fetching project item and project ID for issue: $ISSUE_ID"

            item_response=$(gh api graphql -F id="$ISSUE_ID" -f query='
              query($id: ID!) {
                node(id: $id) {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        ... on ProjectV2Item {
                          id
                          project {
                            ... on ProjectV2 {
                              id
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }')

            ITEM_ID=$(echo "$item_response" | jq -r '.data.node.projectItems.nodes[0].id')
            PROJECT_ID=$(echo "$item_response" | jq -r '.data.node.projectItems.nodes[0].project.id')

            if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" == "null" ] || [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
              echo "‚ùå No project item or project ID found for issue: $ISSUE_ID"
              continue
            fi

            echo "‚úÖ Found item ID: $ITEM_ID"

            fields_response=$(gh api graphql -f query='
            query($id: ID!) {
              node(id: $id) {
                ... on ProjectV2 {
                  fields(first: 50) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        dataType
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -F id="$PROJECT_ID")

            # Extract Status field ID
            STATUS_FIELD_ID=$(echo "$fields_response" | jq -r '
              .data.node.fields.nodes[]
              | select(.name == "Status")
              | .id')

            # Extract the ID for option named "In Review"
            IN_REVIEW_OPTION_ID=$(echo "$fields_response" | jq -r '
              .data.node.fields.nodes[]
              | select(.name == "Status")
              | .options[]
              | select(.name == "In Review")
              | .id')

            echo "Status field ID: $STATUS_FIELD_ID"
            echo "In Review option ID: $IN_REVIEW_OPTION_ID"

            echo "üîÅ Updating status to 'In Review'..."

            gh api graphql -f query='
              mutation($projectId: ID!, $itemId: ID!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: "$STATUS_FIELD_ID",
                    value: {
                      singleSelectOptionId: "$IN_REVIEW_OPTION_ID"
                    }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }' \
              -F projectId="$PROJECT_ID" \
              -F itemId="$ITEM_ID"
          done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}  # Use PAT with proper scopes if necessary

name: Update Project Status When PR Links to Issue

on:
  pull_request:
    types: [opened, edited]

permissions:
  contents: read           # Read repository contents
  issues: read            # Read issues
  pull-requests: read     # Read pull requests
  repository-projects: write  # Write to repository projects

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update project status for linked issues
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          echo "üîç Processing PR #$PR_NUMBER for linked issues"
          
          # Extract Issue IDs using "Resolve #123" pattern
          ISSUE_IDS=$(echo "$PR_BODY" | grep -oE 'Resolve #[0-9]+' | grep -oE '[0-9]+')
          
          if [ -z "$ISSUE_IDS" ]; then
            echo "‚ö†Ô∏è No 'Resolve #issue_id' patterns found in PR description"
            exit 0
          fi
          
          echo "Found issue IDs: $ISSUE_IDS"
          
          # Process each linked issue
          echo "$ISSUE_IDS" | while read -r ISSUE_ID; do
            if [ -z "$ISSUE_ID" ]; then
              continue
            fi
            
            echo "üîó Processing Issue #$ISSUE_ID"
            
            # First, validate if the issue exists using REST API
            echo "üîç Validating issue #$ISSUE_ID exists..."
            ISSUE_CHECK_RESPONSE=$(curl -s -w "\n%{http_code}" \
              "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$ISSUE_ID" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json")
            
            ISSUE_CHECK_CODE=$(echo "$ISSUE_CHECK_RESPONSE" | tail -n1)
            ISSUE_CHECK_BODY=$(echo "$ISSUE_CHECK_RESPONSE" | head -n -1)
            
            if [ "$ISSUE_CHECK_CODE" = "200" ]; then
              echo "‚úÖ Issue #$ISSUE_ID exists and is accessible"
            elif [ "$ISSUE_CHECK_CODE" = "403" ]; then
              echo "‚ùå Access forbidden to issue #$ISSUE_ID (HTTP 403)"
              echo "üìù This could mean:"
              echo "   - GitHub token lacks required permissions (needs 'repo' scope for private repos)"
              echo "   - Issue is in a private repository"
              echo "   - Token doesn't have access to this repository"
              echo "üîç Token permissions needed: repo, read:project"
              continue
            elif [ "$ISSUE_CHECK_CODE" = "404" ]; then
              echo "‚ùå Issue #$ISSUE_ID does not exist in repository $REPO_OWNER/$REPO_NAME (HTTP 404)"
              continue
            else
              echo "‚ùå Unexpected error checking issue #$ISSUE_ID (HTTP $ISSUE_CHECK_CODE)"
              echo "Response: $ISSUE_CHECK_BODY"
              continue
            fi
            
            # Step 1: Get the issue details first
            echo "üîç Getting issue details for #$ISSUE_ID..."
            ISSUE_QUERY='{
              "query": "query GetIssue($owner: String!, $repo: String!, $issueNumber: Int!) { repository(owner: $owner, name: $repo) { issue(number: $issueNumber) { id title } } }",
              "variables": {
                "owner": "'$REPO_OWNER'",
                "repo": "'$REPO_NAME'",
                "issueNumber": '$ISSUE_ID'
              }
            }'
            
            ISSUE_RESPONSE=$(curl -s -X POST "https://api.github.com/graphql" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$ISSUE_QUERY")
            
            # Debug: Print issue response
            echo "üêõ DEBUG: Issue Query Response:"
            echo "$ISSUE_RESPONSE" | jq . || echo "Response is not valid JSON: $ISSUE_RESPONSE"
            
            # Validate JSON response
            if ! echo "$ISSUE_RESPONSE" | jq . > /dev/null 2>&1; then
              echo "‚ùå Invalid JSON response from GitHub GraphQL API"
              echo "Response: $ISSUE_RESPONSE"
              continue
            fi
            
            # Check for GraphQL errors
            ISSUE_ERRORS=$(echo "$ISSUE_RESPONSE" | jq -r '.errors // empty')
            if [ -n "$ISSUE_ERRORS" ]; then
              echo "‚ùå GraphQL errors getting issue #$ISSUE_ID:"
              echo "$ISSUE_ERRORS"
              continue
            fi
            
            # Get issue node ID
            ISSUE_NODE_ID=$(echo "$ISSUE_RESPONSE" | jq -r '.data.repository.issue.id // null')
            if [ "$ISSUE_NODE_ID" = "null" ] || [ -z "$ISSUE_NODE_ID" ]; then
              echo "‚ùå Could not get issue node ID for #$ISSUE_ID"
              continue
            fi
            
            echo "‚úÖ Found issue #$ISSUE_ID with node ID: $ISSUE_NODE_ID"
            
            # Step 2: Query repository owner's projects to find the issue
            echo "üîç Searching projects owned by $REPO_OWNER for issue #$ISSUE_ID..."
            PROJECTS_QUERY='{
              "query": "query GetOwnerProjects($owner: String!) { user(login: $owner) { projectsV2(first: 20) { nodes { id title fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name dataType options { id name } } } } items(first: 100) { nodes { id content { ... on Issue { id } } fieldValues(first: 20) { nodes { ... on ProjectV2ItemFieldSingleSelectValue { field { ... on ProjectV2SingleSelectField { id name } } optionId name } } } } } } } } organization(login: $owner) { projectsV2(first: 20) { nodes { id title fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name dataType options { id name } } } } items(first: 100) { nodes { id content { ... on Issue { id } } fieldValues(first: 20) { nodes { ... on ProjectV2ItemFieldSingleSelectValue { field { ... on ProjectV2SingleSelectField { id name } } optionId name } } } } } } } } }",
              "variables": {
                "owner": "'$REPO_OWNER'"
              }
            }'
            
            PROJECTS_RESPONSE=$(curl -s -X POST "https://api.github.com/graphql" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$PROJECTS_QUERY")
            
            # Debug: Print projects response
            echo "üêõ DEBUG: Projects Query Response:"
            echo "$PROJECTS_RESPONSE" | jq . || echo "Response is not valid JSON: $PROJECTS_RESPONSE"
            
            
            # Validate JSON response
            if ! echo "$PROJECTS_RESPONSE" | jq . > /dev/null 2>&1; then
              echo "‚ùå Invalid JSON response from GitHub GraphQL API"
              echo "Response: $PROJECTS_RESPONSE"
              continue
            fi
            
            # Check for GraphQL errors
            PROJECTS_ERRORS=$(echo "$PROJECTS_RESPONSE" | jq -r '.errors // empty')
            if [ -n "$PROJECTS_ERRORS" ]; then
              echo "‚ùå GraphQL errors getting projects:"
              echo "$PROJECTS_ERRORS"
              continue
            fi
            
            # Step 3: Search through projects (both user and organization)
            FOUND_IN_PROJECTS=false
            
            # Function to process projects from a given source
            process_projects() {
              local projects_data="$1"
              local source_type="$2"
              
              if [ "$projects_data" = "null" ] || [ -z "$projects_data" ]; then
                echo "‚ö†Ô∏è No $source_type projects found"
                return
              fi
              
              echo "$projects_data" | jq -c '.[]' | while read -r PROJECT; do
                PROJECT_ID=$(echo "$PROJECT" | jq -r '.id')
                PROJECT_TITLE=$(echo "$PROJECT" | jq -r '.title')
                
                echo "üîç Checking $source_type project: $PROJECT_TITLE ($PROJECT_ID)"
                
                # Find the issue in this project's items
                MATCHING_ITEM=$(echo "$PROJECT" | jq -r --arg issue_id "$ISSUE_NODE_ID" '.items.nodes[] | select(.content.id == $issue_id)')
                
                if [ -n "$MATCHING_ITEM" ] && [ "$MATCHING_ITEM" != "null" ]; then
                  echo "‚úÖ Found issue #$ISSUE_ID in $source_type project: $PROJECT_TITLE"
                  FOUND_IN_PROJECTS=true
                  
                  # Get item ID
                  ITEM_ID=$(echo "$MATCHING_ITEM" | jq -r '.id')
                  
                  echo "üìã Processing project: $PROJECT_TITLE (Item ID: $ITEM_ID)"
                  
                  # Find Status field in the project
                  STATUS_FIELD=$(echo "$PROJECT" | jq -r '.fields.nodes[] | select(.name == "Status" and .dataType == "SINGLE_SELECT")')
                  
                  if [ -z "$STATUS_FIELD" ] || [ "$STATUS_FIELD" = "null" ]; then
                    echo "‚ö†Ô∏è No 'Status' single-select field found in project $PROJECT_TITLE"
                    echo "Available fields:"
                    echo "$PROJECT" | jq -r '.fields.nodes[] | "- " + .name + " (type: " + (.dataType // "unknown") + ")"'
                    return
                  fi
                  
                  STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
                  
                  # Find "In Review" option
                  IN_REVIEW_OPTION=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "In Review")')
                  
                  if [ -z "$IN_REVIEW_OPTION" ] || [ "$IN_REVIEW_OPTION" = "null" ]; then
                    echo "‚ö†Ô∏è No 'In Review' status option found in project $PROJECT_TITLE"
                    echo "Available status options:"
                    echo "$STATUS_FIELD" | jq -r '.options[] | "- " + .name'
                    return
                  fi
                  
                  IN_REVIEW_OPTION_ID=$(echo "$IN_REVIEW_OPTION" | jq -r '.id')
                  
                  # Get current status
                  CURRENT_STATUS=$(echo "$MATCHING_ITEM" | jq -r '.fieldValues.nodes[] | select(.field.name == "Status") | .name // "None"')
                  
                  echo "üìä Current status: $CURRENT_STATUS"
                  
                  if [ "$CURRENT_STATUS" = "In Review" ]; then
                    echo "‚úÖ Status already set to 'In Review' for issue #$ISSUE_ID in project $PROJECT_TITLE"
                    return
                  fi
                  
                  # Update status to "In Review"
                  echo "üîÑ Updating status from '$CURRENT_STATUS' to 'In Review'..."
                  
                  UPDATE_MUTATION='{
                    "query": "mutation UpdateProjectV2ItemFieldValue($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId itemId: $itemId fieldId: $fieldId value: $value }) { projectV2Item { id } } }",
                    "variables": {
                      "projectId": "'$PROJECT_ID'",
                      "itemId": "'$ITEM_ID'",
                      "fieldId": "'$STATUS_FIELD_ID'",
                      "value": {
                        "singleSelectOptionId": "'$IN_REVIEW_OPTION_ID'"
                      }
                    }
                  }'
                  
                  UPDATE_RESPONSE=$(curl -s -X POST "https://api.github.com/graphql" \
                    -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "$UPDATE_MUTATION")
                  
                  # Check for update errors
                  UPDATE_ERRORS=$(echo "$UPDATE_RESPONSE" | jq -r '.errors // empty')
                  if [ -n "$UPDATE_ERRORS" ]; then
                    echo "‚ùå Failed to update status: $UPDATE_ERRORS"
                    return
                  fi
                  
                  echo "‚úÖ Successfully updated status to 'In Review' for issue #$ISSUE_ID in project $PROJECT_TITLE"
                  echo "üîÑ Status changed: $CURRENT_STATUS ‚Üí In Review"
                else
                  echo "‚ö†Ô∏è Issue #$ISSUE_ID not found in $source_type project $PROJECT_TITLE"
                fi
              done
            }
            
            # Process user projects
            USER_PROJECTS=$(echo "$PROJECTS_RESPONSE" | jq -r '.data.user.projectsV2.nodes // null')
            if [ "$USER_PROJECTS" != "null" ]; then
              echo "üîç Checking user projects..."
              process_projects "$USER_PROJECTS" "user"
            fi
            
            # Process organization projects  
            ORG_PROJECTS=$(echo "$PROJECTS_RESPONSE" | jq -r '.data.organization.projectsV2.nodes // null')
            if [ "$ORG_PROJECTS" != "null" ]; then
              echo "üîç Checking organization projects..."
              process_projects "$ORG_PROJECTS" "organization"
            fi
            
            if [ "$FOUND_IN_PROJECTS" = "false" ]; then
              echo "‚ö†Ô∏è Issue #$ISSUE_ID was not found in any projects owned by $REPO_OWNER"
            fi
            
            # Process each project
            echo "$PROJECT_RESPONSE" | jq -c '.data.repository.issue.projectItems.nodes[]' | while read -r PROJECT_ITEM; do
              PROJECT_ID=$(echo "$PROJECT_ITEM" | jq -r '.project.id')
              PROJECT_TITLE=$(echo "$PROJECT_ITEM" | jq -r '.project.title')
              ITEM_ID=$(echo "$PROJECT_ITEM" | jq -r '.id')
              
              echo "üìã Processing project: $PROJECT_TITLE"
              
              # Find Status field
              STATUS_FIELD=$(echo "$PROJECT_ITEM" | jq -r '.project.fields.nodes[] | select(.name == "Status" and .dataType == "SINGLE_SELECT")')
              
              if [ -z "$STATUS_FIELD" ] || [ "$STATUS_FIELD" = "null" ]; then
                echo "‚ö†Ô∏è No 'Status' single-select field found in project $PROJECT_TITLE"
                continue
              fi
              
              STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
              
              # Find "In Review" option
              IN_REVIEW_OPTION=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "In Review")')
              
              if [ -z "$IN_REVIEW_OPTION" ] || [ "$IN_REVIEW_OPTION" = "null" ]; then
                echo "‚ö†Ô∏è No 'In Review' status option found in project $PROJECT_TITLE"
                echo "Available options:"
                echo "$STATUS_FIELD" | jq -r '.options[] | "- " + .name'
                continue
              fi
              
              IN_REVIEW_OPTION_ID=$(echo "$IN_REVIEW_OPTION" | jq -r '.id')
              
              # Get current status
              CURRENT_STATUS=$(echo "$PROJECT_ITEM" | jq -r '.fieldValues.nodes[] | select(.field.name == "Status") | .name // "None"')
              
              echo "üìä Current status: $CURRENT_STATUS"
              
              if [ "$CURRENT_STATUS" = "In Review" ]; then
                echo "‚úÖ Status already set to 'In Review' for issue #$ISSUE_ID in project $PROJECT_TITLE"
                continue
              fi
              
              # Update status to "In Review"
              UPDATE_MUTATION='{
                "query": "mutation UpdateProjectV2ItemFieldValue($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId itemId: $itemId fieldId: $fieldId value: $value }) { projectV2Item { id } } }",
                "variables": {
                  "projectId": "'$PROJECT_ID'",
                  "itemId": "'$ITEM_ID'",
                  "fieldId": "'$STATUS_FIELD_ID'",
                  "value": {
                    "singleSelectOptionId": "'$IN_REVIEW_OPTION_ID'"
                  }
                }
              }'
              
              UPDATE_RESPONSE=$(curl -s -X POST "https://api.github.com/graphql" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$UPDATE_MUTATION")
              
              # Check for update errors
              UPDATE_ERRORS=$(echo "$UPDATE_RESPONSE" | jq -r '.errors // empty')
              if [ -n "$UPDATE_ERRORS" ]; then
                echo "‚ùå Failed to update status: $UPDATE_ERRORS"
                continue
              fi
              
              echo "‚úÖ Successfully updated status to 'In Review' for issue #$ISSUE_ID in project $PROJECT_TITLE"
              echo "üîÑ Status changed: $CURRENT_STATUS ‚Üí In Review"
            done
          done

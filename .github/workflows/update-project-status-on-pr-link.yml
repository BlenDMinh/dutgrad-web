name: Update Project Status When PR Links to Issue

on:
  pull_request:
    types: [opened, edited]

permissions:
  contents: read           # Read repository contents
  issues: read            # Read issues
  pull-requests: read     # Read pull requests
  repository-projects: write  # Write to repository projects

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update project status for linked issues
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          echo "üîç Processing PR #$PR_NUMBER for linked issues"
          
          # Extract Issue IDs using "Resolve #123" pattern
          ISSUE_IDS=$(echo "$PR_BODY" | grep -oE 'Resolve #[0-9]+' | grep -oE '[0-9]+')
          
          if [ -z "$ISSUE_IDS" ]; then
            echo "‚ö†Ô∏è No 'Resolve #issue_id' patterns found in PR description"
            exit 0
          fi
          
          echo "Found issue IDs: $ISSUE_IDS"
          
          # Process each linked issue
          echo "$ISSUE_IDS" | while read -r ISSUE_ID; do
            if [ -z "$ISSUE_ID" ]; then
              continue
            fi
            
            echo "üîó Processing Issue #$ISSUE_ID"
            
            # First, validate if the issue exists using REST API
            echo "üîç Validating issue #$ISSUE_ID exists..."
            ISSUE_CHECK_RESPONSE=$(curl -s -w "\n%{http_code}" \
              "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$ISSUE_ID" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json")
            
            ISSUE_CHECK_CODE=$(echo "$ISSUE_CHECK_RESPONSE" | tail -n1)
            ISSUE_CHECK_BODY=$(echo "$ISSUE_CHECK_RESPONSE" | head -n -1)
            
            if [ "$ISSUE_CHECK_CODE" = "200" ]; then
              echo "‚úÖ Issue #$ISSUE_ID exists and is accessible"
            elif [ "$ISSUE_CHECK_CODE" = "403" ]; then
              echo "‚ùå Access forbidden to issue #$ISSUE_ID (HTTP 403)"
              echo "üìù This could mean:"
              echo "   - GitHub token lacks required permissions (needs 'repo' scope for private repos)"
              echo "   - Issue is in a private repository"
              echo "   - Token doesn't have access to this repository"
              echo "üîç Token permissions needed: repo, read:project"
              continue
            elif [ "$ISSUE_CHECK_CODE" = "404" ]; then
              echo "‚ùå Issue #$ISSUE_ID does not exist in repository $REPO_OWNER/$REPO_NAME (HTTP 404)"
              continue
            else
              echo "‚ùå Unexpected error checking issue #$ISSUE_ID (HTTP $ISSUE_CHECK_CODE)"
              echo "Response: $ISSUE_CHECK_BODY"
              continue
            fi
            
            # Get project items for this issue using GraphQL
            GRAPHQL_QUERY='{
              "query": "query GetIssueProjects($owner: String!, $repo: String!, $issueNumber: Int!) { repository(owner: $owner, name: $repo) { issue(number: $issueNumber) { id title projectItems(first: 10) { nodes { id project { id title fields(first: 20) { nodes { ... on ProjectV2Field { id name dataType } ... on ProjectV2SingleSelectField { id name dataType options { id name } } } } } fieldValues(first: 20) { nodes { ... on ProjectV2ItemFieldSingleSelectValue { field { ... on ProjectV2SingleSelectField { id name } } optionId name } } } } } } } }",
              "variables": {
                "owner": "'$REPO_OWNER'",
                "repo": "'$REPO_NAME'",
                "issueNumber": '$ISSUE_ID'
              }
            }'
            
            # Execute GraphQL query
            PROJECT_RESPONSE=$(curl -s -X POST "https://api.github.com/graphql" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$GRAPHQL_QUERY")
            
            # Debug: Print the full API response
            echo "üêõ DEBUG: GraphQL API Response for Issue #$ISSUE_ID:"
            echo "$PROJECT_RESPONSE" | jq . || echo "Response is not valid JSON: $PROJECT_RESPONSE"
            echo "üêõ DEBUG: End of API Response"
            
            # Validate JSON response
            if ! echo "$PROJECT_RESPONSE" | jq . > /dev/null 2>&1; then
              echo "‚ùå Invalid JSON response from GitHub GraphQL API"
              echo "Response: $PROJECT_RESPONSE"
              continue
            fi
            
            # Check for GraphQL errors
            ERRORS=$(echo "$PROJECT_RESPONSE" | jq -r '.errors // empty')
            if [ -n "$ERRORS" ]; then
              echo "‚ùå GraphQL errors for issue #$ISSUE_ID:"
              echo "$ERRORS"
              echo "üìù Debug info:"
              echo "  Repository: $REPO_OWNER/$REPO_NAME"
              echo "  Issue ID: $ISSUE_ID"
              continue
            fi
            
            # Check if issue exists
            ISSUE_EXISTS=$(echo "$PROJECT_RESPONSE" | jq -r '.data.repository.issue != null')
            if [ "$ISSUE_EXISTS" != "true" ]; then
              echo "‚ùå Issue #$ISSUE_ID not found in GraphQL response"
              echo "üìù This might indicate the issue exists but has no project assignments"
              continue
            fi
            
            # Get project items
            PROJECT_ITEMS=$(echo "$PROJECT_RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[]')
            
            if [ -z "$PROJECT_ITEMS" ] || [ "$PROJECT_ITEMS" = "null" ]; then
              echo "‚ö†Ô∏è Issue #$ISSUE_ID is not assigned to any projects"
              continue
            fi
            
            # Process each project
            echo "$PROJECT_RESPONSE" | jq -c '.data.repository.issue.projectItems.nodes[]' | while read -r PROJECT_ITEM; do
              PROJECT_ID=$(echo "$PROJECT_ITEM" | jq -r '.project.id')
              PROJECT_TITLE=$(echo "$PROJECT_ITEM" | jq -r '.project.title')
              ITEM_ID=$(echo "$PROJECT_ITEM" | jq -r '.id')
              
              echo "üìã Processing project: $PROJECT_TITLE"
              
              # Find Status field
              STATUS_FIELD=$(echo "$PROJECT_ITEM" | jq -r '.project.fields.nodes[] | select(.name == "Status" and .dataType == "SINGLE_SELECT")')
              
              if [ -z "$STATUS_FIELD" ] || [ "$STATUS_FIELD" = "null" ]; then
                echo "‚ö†Ô∏è No 'Status' single-select field found in project $PROJECT_TITLE"
                continue
              fi
              
              STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
              
              # Find "In Review" option
              IN_REVIEW_OPTION=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "In Review")')
              
              if [ -z "$IN_REVIEW_OPTION" ] || [ "$IN_REVIEW_OPTION" = "null" ]; then
                echo "‚ö†Ô∏è No 'In Review' status option found in project $PROJECT_TITLE"
                echo "Available options:"
                echo "$STATUS_FIELD" | jq -r '.options[] | "- " + .name'
                continue
              fi
              
              IN_REVIEW_OPTION_ID=$(echo "$IN_REVIEW_OPTION" | jq -r '.id')
              
              # Get current status
              CURRENT_STATUS=$(echo "$PROJECT_ITEM" | jq -r '.fieldValues.nodes[] | select(.field.name == "Status") | .name // "None"')
              
              echo "üìä Current status: $CURRENT_STATUS"
              
              if [ "$CURRENT_STATUS" = "In Review" ]; then
                echo "‚úÖ Status already set to 'In Review' for issue #$ISSUE_ID in project $PROJECT_TITLE"
                continue
              fi
              
              # Update status to "In Review"
              UPDATE_MUTATION='{
                "query": "mutation UpdateProjectV2ItemFieldValue($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId itemId: $itemId fieldId: $fieldId value: $value }) { projectV2Item { id } } }",
                "variables": {
                  "projectId": "'$PROJECT_ID'",
                  "itemId": "'$ITEM_ID'",
                  "fieldId": "'$STATUS_FIELD_ID'",
                  "value": {
                    "singleSelectOptionId": "'$IN_REVIEW_OPTION_ID'"
                  }
                }
              }'
              
              UPDATE_RESPONSE=$(curl -s -X POST "https://api.github.com/graphql" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$UPDATE_MUTATION")
              
              # Check for update errors
              UPDATE_ERRORS=$(echo "$UPDATE_RESPONSE" | jq -r '.errors // empty')
              if [ -n "$UPDATE_ERRORS" ]; then
                echo "‚ùå Failed to update status: $UPDATE_ERRORS"
                continue
              fi
              
              echo "‚úÖ Successfully updated status to 'In Review' for issue #$ISSUE_ID in project $PROJECT_TITLE"
              echo "üîÑ Status changed: $CURRENT_STATUS ‚Üí In Review"
            done
          done
